import asyncio
import os
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.sessions import StringSession
import nest_asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
log = logging.getLogger("relay-bot")

nest_asyncio.apply()
load_dotenv()

API_ID = int(os.getenv("API_ID"))
API_HASH = os.getenv("API_HASH")
STRING_SESSION = os.getenv("STRING_SESSION")
TARGET_CHAT_ID = int(os.getenv("TARGET_CHAT_ID"))

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    log.info("üöÄ –ó–∞–ø—É—Å–∫ main()...")
    client = TelegramClient(StringSession(STRING_SESSION), API_ID, API_HASH)
    await client.start()

    # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞ —è–≤–Ω–æ
    source_username = os.getenv("SOURCE_CHAT_ID")
    source_entity = await client.get_entity(source_username)
    log.info(f"‚úÖ SOURCE_CHAT_ID resolved to entity: {source_entity.id}")

    log.info("üì° –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª...")

    @client.on(events.NewMessage(chats=source_entity))
    async def handler(event):
        text = event.message.message
        log.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        if text:
            await client.send_message(TARGET_CHAT_ID, text)
            log.info(f"üì§ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {TARGET_CHAT_ID}")

    await client.run_until_disconnected()

asyncio.run(main())
